from typing import TYPE_CHECKING, List

from ._base_transform import Transform

if TYPE_CHECKING:
    import numpy as np

    from ..sample import Sample

class RatioTransform(Transform):
    def __init__(
        self,
        transform_id: str,
        dim_ids: List[str],
        param_a: float,
        param_b: float,
        param_c: float,
    ): ...
    def __repr__(self): ...
    def apply(self, sample: Sample) -> np.ndarray: ...

class LinearTransform(Transform):
    def __init__(self, transform_id: str, param_t: float, param_a: float): ...
    def __repr__(self): ...
    def apply(self, events: np.ndarray) -> np.ndarray: ...
    def inverse(self, events: np.ndarray) -> np.ndarray: ...

class LogTransform(Transform):
    def __init__(self, transform_id: str, param_t: float, param_m: float): ...
    def __repr__(self): ...
    def apply(self, events: np.ndarray) -> np.ndarray: ...
    def inverse(self, events: np.ndarray) -> np.ndarray: ...

class HyperlogTransform(Transform):
    def __init__(
        self,
        transform_id,
        param_t: float,
        param_w: float,
        param_m: float,
        param_a: float,
    ): ...
    def __repr__(self): ...
    def apply(self, events: np.ndarray) -> np.ndarray: ...
    def inverse(self, events: np.ndarray) -> np.ndarray: ...

class LogicleTransform(Transform):
    def __init__(
        self,
        transform_id,
        param_t: float,
        param_w: float,
        param_m: float,
        param_a: float,
    ): ...
    def __repr__(self): ...
    def apply(self, events: np.ndarray) -> np.ndarray: ...
    def inverse(self, events: np.ndarray) -> np.ndarray: ...

class AsinhTransform(Transform):
    def __init__(
        self, transform_id, param_t: float, param_m: float, param_a: float
    ): ...
    def __repr__(self): ...
    def apply(self, events: np.ndarray) -> np.ndarray: ...
    def inverse(self, events: np.ndarray) -> np.ndarray: ...
